class IntStack
{
    private:
        int *stackArray;
        int stackSize;
        int top;
        
    public:
        IntStack(int size);
        void push(int num);
        void pop(int &num);
        bool isFull();
        bool isEmpty();
};

main:

#include <iostream>
#include "IntStack.h"
using namespace std;

IntStack::IntStack(int size)
{
    stackArray = new int[size];
    stackSize = size;
    top = -1;
}


void IntStack::push(int num)
{
    if (isFull())
        {
            cout << "The stack is full.\n";
        }
    else
        {
            top++;
            stackArray[top] = num;
        }
}


void IntStack::pop(int &num)
{
    if (isEmpty())
        {
            cout << "The stack is empty.\n";
        }
    else
        {
            num = stackArray[top];
            top--;
        }
}


bool IntStack::isFull()
{
    bool status;
    if (top == stackSize - 1)
        status = true;
    else
        status = false;
        
    return status;
}


bool IntStack::isEmpty()
{
    bool status;
    if (top == -1)
        status = true;
    else
        status = false;
        
    return status;
}

int main()
{
    IntStack stack(5);
    int catchVar;
    
    cout << "Pushing 5\n";
    stack.push(5);
    cout << "Pushing 10\n";
    stack.push(10);
    cout << "Pushing 15\n";
    stack.push(15);
    cout << "Pushing 20\n";
    stack.push(20);
    cout << "Pushing 25\n";
    stack.push(25);
    
    cout << "Popping...\n";
    stack.pop(catchVar);
    cout << catchVar << endl;
    stack.pop(catchVar);
    cout << catchVar << endl;
    stack.pop(catchVar);
    cout << catchVar << endl;
    stack.pop(catchVar);
    cout << catchVar << endl;
    stack.pop(catchVar);
    cout << catchVar << endl;
}



// This program demonstrates the STL stack
// container adapter.
#include <iostream>
#include <vector>
#include <stack>
using namespace std;
int main()
    {
    int x;
    stack< int, vector<int> > iStack;
    
    for (x = 2; x < 8; x += 2)
    {
        cout << "Pushing " << x << endl;
        iStack.push(x);
    }
    cout << "The size of the stack is ";
    cout << iStack.size() << endl;
    
    for (x = 2; x < 8; x += 2)
    {
        cout << "Popping " << iStack.top() << endl;
        iStack.pop();
    }
}
